// set flags and parameters
// V0 -- commandByte
//    -- V0 = 0 is IDLE
//    -- V0 = 5 is dogleg homing procedure
//    -- V0 = 6 is dogleg goto procedure
//    -- V0 = -1 is set FPOS to value
// V1 -- motorID
//    -- (see variableDictionaryXCD2.py for full list of motorIDs)
// V9 -- dogleg offset
// V10 - valueByte, used to encode goto values
// V11 - numRevs, used to keep dogleg within +/-3 rots
// V16 - dirMove, used to determine CCW or CW rotation
// V17 - numSteps = abs(4*relPos) numver of quarter-turn steps
// V18 - relPos, calculated distance to desired position
// V19 - statusByte
//     - V19 = 0 SUCCESS/IDLE
//     - V19 = 1 FAIL by out of bounds
//     - V19 = 8 WAITING - command issued by RPi but waiting for xms
//     - V19 = 9 BUSY
XAXIS = 1
ENR = 6.103515625e-5
MTL = 4000000
DZMIN = ENR
DZMAX = 4*ENR
KP = 10
VEL = 1

// invert dogleg encoder feedback (bit 18)
config 900, 0x00051001
delay 1000

XAXIS = 0
ENR = 6.103515625e-5
MTL = 4000000
DZMIN = ENR
DZMAX = 4*ENR
KP = 10
VEL = 1

// invert dogleg encoder feedback (bit 18)
config 900, 0x00051001



// time for system start up sequence
delay 2000

// initialize commandBYTE, statusBYTE to IDLE
V0 = 0
V19 = 98

// set encoder latch POS flag to 0
set S_IND = 0

// Start infinite loop
while 1  

   // dogleg homing procedure - find home tick, record dist
   // relative to starting position
   if V0 = 5
   
      // set statusBYTE BUSY
      V19 = 9

      // store current position
      V1 = FPOS

      // check if out of bounds
      if abs(V11) >= 3
         V19 = 1
         V0 = 0
      else

         // calculate direction
         V16 = 1
         if V11 > 0
            V16 = -1
         end

         // get pretty close (within quarter turn)
         enable
         while S_IND = 0 & abs(V11) < 3
            move FPOS + V16*0.25
            delay 500
            move FPOS - V16*0.01
            delay 100
         end
         disable

         // flag will have flipped so reset, update V11
         set S_IND = 0
         V11 = V11 + V16
         
         //turn in other direction until flag flips again
         enable
         velocityloop -V16*1.5
         while S_IND = 0
         end
         velocityloop 0.0
         disable

         // again reset flag, update V11
         set S_IND = 0
         V11 = V11 - V16

         // calculate distance between start and home
         V9 = V1 - FPOS

         // set statusBYTE SUCCESS
         V19 = 0

      end

      // reset to IDLE state
      V0 = 0

   // end dogleg homing procedure
   end



   // dogleg goto procedure
   if V0 = 6

      // set statusBYTE BUSY
      V19 = 9

      // debug FPOS
      V12 = FPOS

      // calculate if destination is out of bounds
      V18 = V10 - FPOS

      if abs(V18 + V11) > 3
         V19 = 1
         V0 = 0
      else
         // calculate number of steps to take V17
         V17 = abs(4*V18)

         // calculate direction
         V16 = 1
         if V18 < 0
            V16 = -1
         end

         enable
         while V17 > 1 & V11*V16 < 3
            move FPOS + V16*0.25
            delay 500
            move FPOS - V16*0.01
            delay 100
  
            if S_IND <> 0
               V11 = V11 + V16
               set S_IND = 0
            end

            V17 = V17 - 1
         end

         // more debug of FPOS
         V13 = FPOS

         if V11*V16 < 3
            move V10
            delay 1000
      
            if S_IND <> 0
               V11 = V11 + V16
               set S_IND = 0
            end

         end
         disable
      
         // even more debug FPOS
         V14 = FPOS

         // set statusBYTE SUCCESS
         V19 = 0

      end

      // reset to IDLE state
      V0 = 0

   // end dogleg goto procedure
   end



   // sets FPOS to certain value for debugging
   if V0 = -1

      // set statusBYTE BUSY
      V19 = 9

      // set 
      set FPOS = V10

   // end set FPOS
   end

   // retry loop every half second
   delay 100

end
